Document to explain and list important components and aspects of the project by listing what they do, and how they connect and interact with each other.

# Purpose, what is here and future plans

The purpose of this program is to give bicyclists a way to convert their gpx tracks into human readable cue sheets. This program is intended to take in a .gpx file
and return instructions in some form readable by humans.

Currently a Flask front end is used for uploading .gpx files and displaying the resutling cue sheet, with a Python back end for processing. 
Future changes to consider: multi-track processing, the ability to download the instructions (as opposed to copy pasting them to a text file).

# Program Organization

## Files 
### Folders
The outer section of the program is split into 3 files:
'tests': contains all code/files related to testing the application, including the instructions/documentation on how to run the tests
'documents': contains the documentation on the authors of the program, as well as the detailed programmer and user manuals
'version-0': contains information about the first version of the applictaion, in which we were planning to use binary search instead of routing.
'src': contains the data relevant to running the application
specifically 'src'contains:
'__pychache__': the cache for the virtual environment
'static': contains assets for use within the Flask application (such as the powered by Google image)
'templates': contains the HTML templates for use within Flask (such as 'index.html' and 'display.html') 
'uploads': is used by Flask to store the gpx files uploaded by users
'venv': contains information related to the virtual environment
'src' also contains the python files that make up the application, as well as files needed for installation

### Program Files
'gpxparse.py': handles everything related to the conversion of a gpx file into a list of (lat, long) tuples
'findturns.py': handels taking the lat longs from gpxparse, and converting them into instructions a human can read
'app.py': is the main driver of the program, it stores the information to run the Flask app, and makes the calls to 'gpxparse.py' and 'findturns.py'
'settings.py: is used to house the secret key, as well as the Google api key
'requirements.txt' contains the required modules to be installed by pip
'start.sh' contains a script to launch the Flask server

## Functions
### gpxparse.py
gpxparse only contains one function, 'read' which takes in a path to a gpx file, so it can then read that file, extract the lat long points,
and return them as a list of tuples of the form [(lat,long), ... ] gpxparse does this utilizing the 'parse' and 'simplify' methods from the gpxpy library

### findturns.py
findturns contains 4 functions:
'createSegments': Our method for reverse geocoding a route is to take the points from the track, and use them as the start, end, and waypoints of a Google Maps Directions
request. Google Maps only allows for a maximum of 25 waypoints, so the track must first be divided in separate sections. 'createSegments' figures out what points in the
track should be start, end, or waypoints in the final request(s), and formats them as a list of dictionaries, where each dictionary corresponds to a segment of the route
and is of the form: {'start': (lat,long), 'waypoints': ['via:lat,long', ...], 'end': (lat,long)}
'getDirections': takes the dictionaries created by 'createSegments' and uses them to make requests to the Google Maps Directions api, using the googlemaps module.
The directions for each segment are appended to a list and then returned
'parseDirections': takes the list of data returned from Google, and parses out only what is relevant to the application. Specifically the distance of the instruction,
as well as the HTML version of the instruction, for each step. The HTML tags are then removed, and the distance is used to calculate total distance traveled. This information is 
returned in a list of tuples: [(distance of the instruction, the instruction, total distance traveled), ... ]
'directionsToString' takes the list of tuples returned by 'parseDirections' and converts it to one large string, with a bit of formatting, so that it can be displayed by Flask. 

### app.py
app contains 3 functions:
'index': Creates the initial landing page for the Flask application, and returns a template to be rendered by Flask
'upload_files': handles the uploading of a gpx file, and passes the file information to 'execute'
'execute': processes the gpx file, recieved from 'upload_files', by passing it through gpxparse and find turns in the order of 
read -> createSegments -> getDirections -> parseDirections -> directionsToString
'execute' returns the string from 'directionsToString' to Flask, for use with the 'display.html' template

# Testing

The "test" directory contains files that can be used for testing the source code.

# Known issues/limitations

### Only works with gpx files
Tracks in other formats of files will not work, must be .gpx

### Unkown paths/roads
Our application is powered by Google, utilzing the Google maps directions api to convert a gpx file into a readable cue sheet. A result of this is if Google doesn't recognize
a path/road taken in the track, the outputted cue sheet results will vary and cannot be guaranteed as accurate.

### Designed for bicyclists
Currently the request specifies bicycling as the mode of transportation, therefore results are tailored to biking. While this application will probably also work for driving,
and somewhat for running/walking in urban areas, bicyclists are the target demographic.

### Input/Output is not always 1 to 1
In some cases, such as U-Turns, Google will output slightly different instructions/distances to complete the U-turn in the track. This means if a gpx file is ran multiple times
the route overall will be the same, but small details could vary.

### gpx files are considered as one track
Currently the way the program reads the gpx file, all of its contents are considered as one long track. If the gpx file holds multiple tracks, they will be treated as one
long track for the purposes of creating a cue sheet

# Previous versions

This program started out by attempting to run a binary search on a set of points to pinpoint a turn, to then be able to recognize the path that was taken and translate it into instructions. Due to limitations with the geocoding services that we found available to us, we then proceeded to change approach and use the Google Maps API.

There is a directory called version-0-files, which contains some of the set-up that was being done for this approach. We have included them in the repository to provide as much insight on that as we can, in case someone wishes to modify the current version and could use an idea of what we tried to do.
